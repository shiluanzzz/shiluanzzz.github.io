<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>未分类 on 风吹不停</title>
    <link>http://www.shiluan.space/tags/%E6%9C%AA%E5%88%86%E7%B1%BB/</link>
    <description>Recent content in 未分类 on 风吹不停</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Fri, 22 Oct 2021 00:00:00 +0000</lastBuildDate><atom:link href="http://www.shiluan.space/tags/%E6%9C%AA%E5%88%86%E7%B1%BB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>局域网打印服务</title>
      <link>http://www.shiluan.space/post/%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%8D%E5%8A%A1/</link>
      <pubDate>Fri, 22 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>http://www.shiluan.space/post/%E5%B1%80%E5%9F%9F%E7%BD%91%E6%89%93%E5%8D%B0%E6%9C%8D%E5%8A%A1/</guid>
      <description>起因：实验室的打印机抽风了，只有我的电脑连的上其他人的电脑都连不上。可能是我离打印机最近。
python的win32print包可以将打印任务直接发送到打印机，于是写了个web服务，接受来自本地小伙伴的文件，然后将其打印。
win32print 通过win32print.EnumPrinters(2)读取到你电脑上连接的所有打印机，然后设置成默认打印机，建议先执行一次，选择固定的。
def PrintFile(file_path): allPrinter=[printer[2] for printer in win32print.EnumPrinters(2)] # PrintNum = int(input(&amp;#34;选择打印机:\n&amp;#34;+&amp;#34;\n&amp;#34;.join([f&amp;#34;{n} {p}&amp;#34; for n,p in enumerate(allPrinter)]))) win32print.SetDefaultPrinter(allPrinter[4]) # pdf_path=&amp;#34;C:\\Users\Luke\Desktop\Doc1.docx&amp;#34; pdf_path=file_path win32api.ShellExecute(0, &amp;#34;print&amp;#34;, pdf_path, &amp;#39;/d:&amp;#34;%s&amp;#34;&amp;#39; % win32print.GetDefaultPrinter (), &amp;#34;.&amp;#34;, 0) 如果出现pywintypes.error: (31, &amp;lsquo;ShellExecute&amp;rsquo;, &amp;lsquo;连到系统上的设备没有发挥作用。&#39;) 错误，需要为你的pdf或者其他文件指定一个默认打开应用。
Web服务 使用flask写了个小demo, 接受局域网的文件后调用打印机打印。
slash = &amp;#39;\\&amp;#39; UPLOAD_FOLDER = &amp;#39;upload&amp;#39; ALLOW_EXTENSIONS = {&amp;#39;doc&amp;#39;, &amp;#39;docx&amp;#39;, &amp;#39;pdf&amp;#39;} app = Flask(__name__) app.config[&amp;#39;UPLOAD_FOLDER&amp;#39;] = UPLOAD_FOLDER #判断文件夹是否存在，如果不存在则创建 if not os.path.exists(UPLOAD_FOLDER): os.makedirs(UPLOAD_FOLDER) else: pass # 判断文件后缀是否在列表中 def allowed_file(filename): return &amp;#39;.</description>
    </item>
    
  </channel>
</rss>
