<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>OS on 风吹不停</title>
    <link>https://shiluanzzz.github.io/tags/os/</link>
    <description>Recent content in OS on 风吹不停</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Tue, 26 Apr 2022 23:51:02 +0800</lastBuildDate><atom:link href="https://shiluanzzz.github.io/tags/os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线程、进程、协程的区别</title>
      <link>https://shiluanzzz.github.io/post/%E7%BA%BF%E7%A8%8B%E8%BF%9B%E7%A8%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Tue, 26 Apr 2022 23:51:02 +0800</pubDate>
      
      <guid>https://shiluanzzz.github.io/post/%E7%BA%BF%E7%A8%8B%E8%BF%9B%E7%A8%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>对操作系统来说，线程是最小的执行单元，进程是最小的资源管理单元。 无论进程还是线程，都是由操作系统所管理的。协程(Coroutines)是一种比线程更加轻量级的存在
1进程 一个进程好比是一个程序，它是资源分配的最小单位 。也是CPU的最小工作单元，就是说操作系统同一时刻执行的进程数不会超过核心数。
电脑中有许多进程需要处于「同时」开启的状态，而利用CPU在进程间的快速切换，可以实现「同时」运行多个程序。而进程切换则意味着需要保留进程切换前的状态，以备切换回去的时候能够继续接着工作。 所以进程拥有自己的地址空间，全局变量，文件描述符，各种硬件等等资源。操作系统通过调度CPU去执行进程的记录、回复、切换等等。
2线程 线程是一个程序执行过程中的最小单元，一个程序可能包含多个线程，这多个线程共享进程的所有资源。每个线程执行不同的任务来提高程序的运行效率。
3进程与线程的区别  进程是CPU资源分配的基本单位，线程是独立运行和独立调度的基本单位（CPU上真正运行的是线程）。 进程拥有自己的资源空间，一个进程包含若干个线程，线程与CPU资源分配无关，多个线程共享同一进程内的资源。 线程的调度与切换比进程快很多。  4为什么要有线程？ 线程的出现就是为了提高单位时间内CPU的利用率。
任务一般分为两种：CPU密集型和IO密集型。
 CPU密集型任务对CPU的利用率较高 IO密集型的程序因为包含了大量的IO操作，所以其状态在就绪、运行、阻塞之前频繁切换。  随着程序的功能越来越复杂，程序更加偏向于IO密集型，而IO密集型任务也就是无法即使完成任务而带来大量的上下文切换。而进程之间上下文切换的代价是比较高的。
因此为了使用更小的粒度提高进程单位时间的CPU利用率，就有了线程的概念。进程作为线程的容器，可以按不同的功能，或想达到更高效率（如多个IO线程）的同一功能，可以考虑产生多个线程。
因为在CPU切换到本进程的时间段时，由于线程间共享进程的上下文，线程切换只需要切换线程的上下文，而不需要切换另一片内存或者寄存器资源，在功能并行执行的同时降低了开销。
但是需要注意的是开更多的线程不会导致本进程得到更多CPU的青睐!多线程只能提高进程在执行过程中的CPU利用率。
5什么是协程？ 虽然线程大幅的提高了CPU的效率，且能够设置一定的优先级，但是线程的资源片分配还是由CPU来管理的。
那么能不能人为管理线程的资源分配（切换）呢？协程在语言层面实现了这一点。
如同一个进程可以有很多线程一样，一个线程可以有很多协程。
但是，协程不是被操作系统所管理的，没有改变CPU最小执行单元是线程，协程是完全由程序所控制的（用户态执行），不会产生上下文切换。
目前只有部分语言实现了协程：
 python的yield/send，当协程执行到yield关键字时，会暂停在那一行，等到主线程调用send方法发送了数据，协程才会接到数据继续执行。 Lua从5.0版本开始使用协程，通过扩展库coroutine来实现。 Go语言对协程的实现非常强大而简洁，可以轻松创建成百上千个协程并发执行。 Java语言并没有对协程的原生支持，但是某些开源框架模拟出了协程的功能，可以看一看Kilim框架的源码：https://github.com/kilim/kilim  参考链接：  https://zhuanlan.zhihu.com/p/70256971  </description>
    </item>
    
  </channel>
</rss>
