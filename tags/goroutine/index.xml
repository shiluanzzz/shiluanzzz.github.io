<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>goroutine on 风吹不停</title>
    <link>https://shiluanzzz.github.io/tags/goroutine/</link>
    <description>Recent content in goroutine on 风吹不停</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Wed, 22 Dec 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://shiluanzzz.github.io/tags/goroutine/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>控制goroutine的并发数量</title>
      <link>https://shiluanzzz.github.io/post/goroutiune%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://shiluanzzz.github.io/post/goroutiune%E6%95%B0%E9%87%8F%E6%8E%A7%E5%88%B6/</guid>
      <description>控制goroutine的并发数量 chan控制（错误） 在启动go程之前尝试向chan中写入数据.
func main() { userCount := 10 ch := make(chan bool, 2) for i := 0; i &amp;lt; userCount; i++ { // 控制  ch &amp;lt;- true go Read(ch, i) } } func Read(ch chan bool, i int) { fmt.Printf(&amp;#34;go func: %d\n&amp;#34;, i) &amp;lt;- ch } 这存在一个问题就是可能go程还没执行完,主协程结束子协程也被终止了. 而单纯使用waitgroup没法控制并发数量.
方案一 : waitgroup+chan组合控制并发   wg主要是防止子协程还没执行完主协程已经退出的情况发生.
... var wg = sync.WaitGroup{} func main() { userCount := 10 ch := make(chan bool, 2) for i := 0; i &amp;lt; userCount; i++ { wg.</description>
    </item>
    
  </channel>
</rss>
